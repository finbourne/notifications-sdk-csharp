/*
 * FINBOURNE Notifications API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Notifications.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Notifications.Sdk.Model
{
    /// <summary>
    /// A subscription object
    /// </summary>
    [DataContract(Name = "Subscription")]
    public partial class Subscription : IEquatable<Subscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Subscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="displayName">The name of the subscription (required).</param>
        /// <param name="description">The summary of the services provided by the subscription.</param>
        /// <param name="status">The current status of the subscription (required).</param>
        /// <param name="matchingPattern">matchingPattern (required).</param>
        /// <param name="createdAt">The time at which the subscription was made (required).</param>
        /// <param name="userIdCreated">The user who made the subscription (required).</param>
        /// <param name="modifiedAt">The time at which the subscription was last modified (required).</param>
        /// <param name="userIdModified">The user who last modified the subscription (required).</param>
        /// <param name="useAsAuth">The user to use as auth for the subscription (required).</param>
        /// <param name="href">A URI for retrieving this subscription.</param>
        public Subscription(ResourceId id = default(ResourceId), string displayName = default(string), string description = default(string), string status = default(string), MatchingPattern matchingPattern = default(MatchingPattern), DateTimeOffset createdAt = default(DateTimeOffset), string userIdCreated = default(string), DateTimeOffset modifiedAt = default(DateTimeOffset), string userIdModified = default(string), string useAsAuth = default(string), string href = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Subscription and cannot be null");
            }
            this.Id = id;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for Subscription and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for Subscription and cannot be null");
            }
            this.Status = status;
            // to ensure "matchingPattern" is required (not null)
            if (matchingPattern == null)
            {
                throw new ArgumentNullException("matchingPattern is a required property for Subscription and cannot be null");
            }
            this.MatchingPattern = matchingPattern;
            this.CreatedAt = createdAt;
            // to ensure "userIdCreated" is required (not null)
            if (userIdCreated == null)
            {
                throw new ArgumentNullException("userIdCreated is a required property for Subscription and cannot be null");
            }
            this.UserIdCreated = userIdCreated;
            this.ModifiedAt = modifiedAt;
            // to ensure "userIdModified" is required (not null)
            if (userIdModified == null)
            {
                throw new ArgumentNullException("userIdModified is a required property for Subscription and cannot be null");
            }
            this.UserIdModified = userIdModified;
            // to ensure "useAsAuth" is required (not null)
            if (useAsAuth == null)
            {
                throw new ArgumentNullException("useAsAuth is a required property for Subscription and cannot be null");
            }
            this.UseAsAuth = useAsAuth;
            this.Description = description;
            this.Href = href;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The name of the subscription
        /// </summary>
        /// <value>The name of the subscription</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The summary of the services provided by the subscription
        /// </summary>
        /// <value>The summary of the services provided by the subscription</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The current status of the subscription
        /// </summary>
        /// <value>The current status of the subscription</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets MatchingPattern
        /// </summary>
        [DataMember(Name = "matchingPattern", IsRequired = true, EmitDefaultValue = true)]
        public MatchingPattern MatchingPattern { get; set; }

        /// <summary>
        /// The time at which the subscription was made
        /// </summary>
        /// <value>The time at which the subscription was made</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The user who made the subscription
        /// </summary>
        /// <value>The user who made the subscription</value>
        [DataMember(Name = "userIdCreated", IsRequired = true, EmitDefaultValue = true)]
        public string UserIdCreated { get; set; }

        /// <summary>
        /// The time at which the subscription was last modified
        /// </summary>
        /// <value>The time at which the subscription was last modified</value>
        [DataMember(Name = "modifiedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ModifiedAt { get; set; }

        /// <summary>
        /// The user who last modified the subscription
        /// </summary>
        /// <value>The user who last modified the subscription</value>
        [DataMember(Name = "userIdModified", IsRequired = true, EmitDefaultValue = true)]
        public string UserIdModified { get; set; }

        /// <summary>
        /// The user to use as auth for the subscription
        /// </summary>
        /// <value>The user to use as auth for the subscription</value>
        [DataMember(Name = "useAsAuth", IsRequired = true, EmitDefaultValue = true)]
        public string UseAsAuth { get; set; }

        /// <summary>
        /// A URI for retrieving this subscription
        /// </summary>
        /// <value>A URI for retrieving this subscription</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MatchingPattern: ").Append(MatchingPattern).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UserIdCreated: ").Append(UserIdCreated).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  UserIdModified: ").Append(UserIdModified).Append("\n");
            sb.Append("  UseAsAuth: ").Append(UseAsAuth).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MatchingPattern == input.MatchingPattern ||
                    (this.MatchingPattern != null &&
                    this.MatchingPattern.Equals(input.MatchingPattern))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UserIdCreated == input.UserIdCreated ||
                    (this.UserIdCreated != null &&
                    this.UserIdCreated.Equals(input.UserIdCreated))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.UserIdModified == input.UserIdModified ||
                    (this.UserIdModified != null &&
                    this.UserIdModified.Equals(input.UserIdModified))
                ) && 
                (
                    this.UseAsAuth == input.UseAsAuth ||
                    (this.UseAsAuth != null &&
                    this.UseAsAuth.Equals(input.UseAsAuth))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.MatchingPattern != null)
                {
                    hashCode = (hashCode * 59) + this.MatchingPattern.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UserIdCreated != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdCreated.GetHashCode();
                }
                if (this.ModifiedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAt.GetHashCode();
                }
                if (this.UserIdModified != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdModified.GetHashCode();
                }
                if (this.UseAsAuth != null)
                {
                    hashCode = (hashCode * 59) + this.UseAsAuth.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            // UserIdCreated (string) minLength
            if (this.UserIdCreated != null && this.UserIdCreated.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdCreated, length must be greater than 1.", new [] { "UserIdCreated" });
            }

            // UserIdModified (string) minLength
            if (this.UserIdModified != null && this.UserIdModified.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserIdModified, length must be greater than 1.", new [] { "UserIdModified" });
            }

            // UseAsAuth (string) minLength
            if (this.UseAsAuth != null && this.UseAsAuth.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UseAsAuth, length must be greater than 1.", new [] { "UseAsAuth" });
            }

            yield break;
        }
    }
}
