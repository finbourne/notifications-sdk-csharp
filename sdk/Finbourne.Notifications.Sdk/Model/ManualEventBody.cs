/*
 * FINBOURNE Notifications API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Notifications.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Notifications.Sdk.Model
{
    /// <summary>
    /// The body of the manual event
    /// </summary>
    [DataContract(Name = "ManualEventBody")]
    public partial class ManualEventBody : IEquatable<ManualEventBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualEventBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManualEventBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualEventBody" /> class.
        /// </summary>
        /// <param name="subject">The subject of the manual event (required).</param>
        /// <param name="message">The message of the manual event (required).</param>
        /// <param name="jsonMessage">The JSON message of the manual event.</param>
        public ManualEventBody(string subject = default(string), string message = default(string), Object jsonMessage = default(Object))
        {
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for ManualEventBody and cannot be null");
            }
            this.Subject = subject;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ManualEventBody and cannot be null");
            }
            this.Message = message;
            this.JsonMessage = jsonMessage;
        }

        /// <summary>
        /// The subject of the manual event
        /// </summary>
        /// <value>The subject of the manual event</value>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// The message of the manual event
        /// </summary>
        /// <value>The message of the manual event</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// The JSON message of the manual event
        /// </summary>
        /// <value>The JSON message of the manual event</value>
        [DataMember(Name = "jsonMessage", EmitDefaultValue = true)]
        public Object JsonMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManualEventBody {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  JsonMessage: ").Append(JsonMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualEventBody);
        }

        /// <summary>
        /// Returns true if ManualEventBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualEventBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualEventBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.JsonMessage == input.JsonMessage ||
                    (this.JsonMessage != null &&
                    this.JsonMessage.Equals(input.JsonMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.JsonMessage != null)
                {
                    hashCode = (hashCode * 59) + this.JsonMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Subject (string) maxLength
            if (this.Subject != null && this.Subject.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be less than 256.", new [] { "Subject" });
            }

            // Subject (string) minLength
            if (this.Subject != null && this.Subject.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be greater than 1.", new [] { "Subject" });
            }

            // Subject (string) pattern
            Regex regexSubject = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexSubject.Match(this.Subject).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, must match a pattern of " + regexSubject, new [] { "Subject" });
            }

            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 2147483647.", new [] { "Message" });
            }

            // Message (string) minLength
            if (this.Message != null && this.Message.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be greater than 1.", new [] { "Message" });
            }

            // Message (string) pattern
            Regex regexMessage = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexMessage.Match(this.Message).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, must match a pattern of " + regexMessage, new [] { "Message" });
            }

            yield break;
        }
    }
}
