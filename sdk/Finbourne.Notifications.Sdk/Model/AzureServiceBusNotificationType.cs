/*
 * FINBOURNE Notifications API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Notifications.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Notifications.Sdk.Model
{
    /// <summary>
    /// The information required to create or update an Azure Service Bus notification
    /// </summary>
    [DataContract(Name = "AzureServiceBusNotificationType")]
    public partial class AzureServiceBusNotificationType : IEquatable<AzureServiceBusNotificationType>, IValidatableObject
    {
        /// <summary>
        /// The type of delivery mechanism for this notification
        /// </summary>
        /// <value>The type of delivery mechanism for this notification</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AzureServiceBus for value: AzureServiceBus
            /// </summary>
            [EnumMember(Value = "AzureServiceBus")]
            AzureServiceBus = 1
        }


        /// <summary>
        /// The type of delivery mechanism for this notification
        /// </summary>
        /// <value>The type of delivery mechanism for this notification</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AzureServiceBusNotificationType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AzureServiceBusNotificationType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AzureServiceBusNotificationType" /> class.
        /// </summary>
        /// <param name="type">The type of delivery mechanism for this notification (required).</param>
        /// <param name="varNamespace">Reference to namespace from Configuration Store (required).</param>
        /// <param name="queueName">Reference to queue name from Configuration Store (required).</param>
        /// <param name="body">The body of the Azure Service Bus Message (required).</param>
        /// <param name="tenantId">Reference to tenant id from Configuration Store (required).</param>
        /// <param name="clientId">Reference to client id from Configuration Store (required).</param>
        /// <param name="clientSecret">Reference to client secret from Configuration Store (required).</param>
        public AzureServiceBusNotificationType(TypeEnum type = default(TypeEnum), string varNamespace = default(string), string queueName = default(string), string body = default(string), string tenantId = default(string), string clientId = default(string), string clientSecret = default(string))
        {
            this.Type = type;
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for AzureServiceBusNotificationType and cannot be null");
            }
            this.Namespace = varNamespace;
            // to ensure "queueName" is required (not null)
            if (queueName == null)
            {
                throw new ArgumentNullException("queueName is a required property for AzureServiceBusNotificationType and cannot be null");
            }
            this.QueueName = queueName;
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for AzureServiceBusNotificationType and cannot be null");
            }
            this.Body = body;
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new ArgumentNullException("tenantId is a required property for AzureServiceBusNotificationType and cannot be null");
            }
            this.TenantId = tenantId;
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for AzureServiceBusNotificationType and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "clientSecret" is required (not null)
            if (clientSecret == null)
            {
                throw new ArgumentNullException("clientSecret is a required property for AzureServiceBusNotificationType and cannot be null");
            }
            this.ClientSecret = clientSecret;
        }

        /// <summary>
        /// Reference to namespace from Configuration Store
        /// </summary>
        /// <value>Reference to namespace from Configuration Store</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// Reference to queue name from Configuration Store
        /// </summary>
        /// <value>Reference to queue name from Configuration Store</value>
        [DataMember(Name = "queueName", IsRequired = true, EmitDefaultValue = true)]
        public string QueueName { get; set; }

        /// <summary>
        /// The body of the Azure Service Bus Message
        /// </summary>
        /// <value>The body of the Azure Service Bus Message</value>
        [DataMember(Name = "body", IsRequired = true, EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Reference to tenant id from Configuration Store
        /// </summary>
        /// <value>Reference to tenant id from Configuration Store</value>
        [DataMember(Name = "tenantId", IsRequired = true, EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Reference to client id from Configuration Store
        /// </summary>
        /// <value>Reference to client id from Configuration Store</value>
        [DataMember(Name = "clientId", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Reference to client secret from Configuration Store
        /// </summary>
        /// <value>Reference to client secret from Configuration Store</value>
        [DataMember(Name = "clientSecret", IsRequired = true, EmitDefaultValue = true)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AzureServiceBusNotificationType {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  QueueName: ").Append(QueueName).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AzureServiceBusNotificationType);
        }

        /// <summary>
        /// Returns true if AzureServiceBusNotificationType instances are equal
        /// </summary>
        /// <param name="input">Instance of AzureServiceBusNotificationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AzureServiceBusNotificationType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.QueueName == input.QueueName ||
                    (this.QueueName != null &&
                    this.QueueName.Equals(input.QueueName))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Namespace != null)
                {
                    hashCode = (hashCode * 59) + this.Namespace.GetHashCode();
                }
                if (this.QueueName != null)
                {
                    hashCode = (hashCode * 59) + this.QueueName.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.TenantId != null)
                {
                    hashCode = (hashCode * 59) + this.TenantId.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Namespace, length must be greater than 1.", new [] { "Namespace" });
            }

            // QueueName (string) minLength
            if (this.QueueName != null && this.QueueName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QueueName, length must be greater than 1.", new [] { "QueueName" });
            }

            // Body (string) maxLength
            if (this.Body != null && this.Body.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Body, length must be less than 1024.", new [] { "Body" });
            }

            // Body (string) minLength
            if (this.Body != null && this.Body.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Body, length must be greater than 1.", new [] { "Body" });
            }

            // Body (string) pattern
            Regex regexBody = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexBody.Match(this.Body).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Body, must match a pattern of " + regexBody, new [] { "Body" });
            }

            // TenantId (string) minLength
            if (this.TenantId != null && this.TenantId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TenantId, length must be greater than 1.", new [] { "TenantId" });
            }

            // ClientId (string) minLength
            if (this.ClientId != null && this.ClientId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientId, length must be greater than 1.", new [] { "ClientId" });
            }

            // ClientSecret (string) minLength
            if (this.ClientSecret != null && this.ClientSecret.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientSecret, length must be greater than 1.", new [] { "ClientSecret" });
            }

            yield break;
        }
    }
}
